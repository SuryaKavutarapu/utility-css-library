/**
 * Color Utilities
 * Text, background, and border color utilities with all color scales
 */

@use '../abstracts/variables' as *;
@use '../abstracts/mixins' as *;

// Text color utilities
@each $color-name, $color-scale in $colors {
  @if type-of($color-scale) == 'map' {
    @each $shade, $value in $color-scale {
      .text-#{$color-name}-#{$shade} {
        color: #{$value};
      }
    }
  } @else {
    .text-#{$color-name} {
      color: #{$color-scale};
    }
  }
}

// Surface and text semantic colors
.text-primary { color: $text-primary; }
.text-secondary { color: $text-secondary; }
.text-tertiary { color: $text-tertiary; }
.text-inverse { color: $text-inverse; }
.text-disabled { color: $text-disabled; }
.text-placeholder { color: $text-placeholder; }
.text-link { color: $text-link; }
.text-link-hover { color: $text-link-hover; }

// Background color utilities
@each $color-name, $color-scale in $colors {
  @if type-of($color-scale) == 'map' {
    @each $shade, $value in $color-scale {
      .bg-#{$color-name}-#{$shade} {
        background-color: #{$value};
      }
    }
  } @else {
    .bg-#{$color-name} {
      background-color: #{$color-scale};
    }
  }
}

// Surface semantic colors
.bg-background { background-color: $surface-background; }
.bg-foreground { background-color: $surface-foreground; }
.bg-card { background-color: $surface-card; }
.bg-popover { background-color: $surface-popover; }
.bg-modal { background-color: $surface-modal; }
.bg-hover { background-color: $surface-hover; }
.bg-pressed { background-color: $surface-pressed; }
.bg-focus { background-color: $surface-focus; }

// Border color utilities
@each $color-name, $color-scale in $colors {
  @if type-of($color-scale) == 'map' {
    @each $shade, $value in $color-scale {
      .border-#{$color-name}-#{$shade} {
        border-color: #{$value};
      }
    }
  } @else {
    .border-#{$color-name} {
      border-color: #{$color-scale};
    }
  }
}

// Border semantic colors
.border-border { border-color: $surface-border; }
.border-divider { border-color: $surface-divider; }

// Special colors
.text-transparent { color: transparent; }
.text-current { color: currentColor; }
.text-inherit { color: inherit; }

.bg-transparent { background-color: transparent; }
.bg-current { background-color: currentColor; }
.bg-inherit { background-color: inherit; }

.border-transparent { border-color: transparent; }
.border-current { border-color: currentColor; }
.border-inherit { border-color: inherit; }

// Opacity utilities for colors
@for $i from 0 through 100 {
  @if $i % 5 == 0 {
    .text-opacity-#{$i} {
      --tw-text-opacity: #{$i / 100};
      color: rgb(from currentColor r g b / var(--tw-text-opacity));
    }
    
    .bg-opacity-#{$i} {
      --tw-bg-opacity: #{$i / 100};
      background-color: rgb(from currentColor r g b / var(--tw-bg-opacity));
    }
    
    .border-opacity-#{$i} {
      --tw-border-opacity: #{$i / 100};
      border-color: rgb(from currentColor r g b / var(--tw-border-opacity));
    }
  }
}

// Gradient utilities
.bg-gradient-to-t {
  background-image: linear-gradient(to top, var(--tw-gradient-stops));
}
.bg-gradient-to-tr {
  background-image: linear-gradient(to top right, var(--tw-gradient-stops));
}
.bg-gradient-to-r {
  background-image: linear-gradient(to right, var(--tw-gradient-stops));
}
.bg-gradient-to-br {
  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
}
.bg-gradient-to-b {
  background-image: linear-gradient(to bottom, var(--tw-gradient-stops));
}
.bg-gradient-to-bl {
  background-image: linear-gradient(to bottom left, var(--tw-gradient-stops));
}
.bg-gradient-to-l {
  background-image: linear-gradient(to left, var(--tw-gradient-stops));
}
.bg-gradient-to-tl {
  background-image: linear-gradient(to top left, var(--tw-gradient-stops));
}

// Gradient color stops
@each $color-name, $color-scale in $colors {
  @if type-of($color-scale) == 'map' {
    @each $shade, $value in $color-scale {
      .from-#{$color-name}-#{$shade} {
        --tw-gradient-from: #{$value};
        --tw-gradient-to: rgb(from #{$value} r g b / 0);
        --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
      }
      
      .via-#{$color-name}-#{$shade} {
        --tw-gradient-to: rgb(from #{$value} r g b / 0);
        --tw-gradient-stops: var(--tw-gradient-from), #{$value}, var(--tw-gradient-to);
      }
      
      .to-#{$color-name}-#{$shade} {
        --tw-gradient-to: #{$value};
      }
    }
  }
}

// Responsive variants
@include responsive-utilities {
  // Text colors
  @each $color-name, $color-scale in $colors {
    @if type-of($color-scale) == 'map' {
      @each $shade, $value in $color-scale {
        .text-#{$color-name}-#{$shade} {
          color: #{$value};
        }
      }
    }
  }
  
  // Background colors
  @each $color-name, $color-scale in $colors {
    @if type-of($color-scale) == 'map' {
      @each $shade, $value in $color-scale {
        .bg-#{$color-name}-#{$shade} {
          background-color: #{$value};
        }
      }
    }
  }
  
  // Border colors
  @each $color-name, $color-scale in $colors {
    @if type-of($color-scale) == 'map' {
      @each $shade, $value in $color-scale {
        .border-#{$color-name}-#{$shade} {
          border-color: #{$value};
        }
      }
    }
  }
}
